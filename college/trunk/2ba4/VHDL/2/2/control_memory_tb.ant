-- F:\2BA4\VHDL\2\2\CONTROL_MEMORY_TB.ANT
-- VHDL Annotation Test Bench created by
-- HDL Bencher 4.1i
-- Wed May 12 15:10:39 2004

LIBRARY  IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;

LIBRARY ieee;
USE IEEE.STD_LOGIC_TEXTIO.ALL;
USE STD.TEXTIO.ALL;

ENTITY testbench IS
END testbench;

ARCHITECTURE testbench_arch OF testbench IS
-- If you get a compiler error on the following line,
-- from the menu do Options->Configuration select VHDL 87
FILE RESULTS: TEXT OPEN WRITE_MODE IS "f:\2ba4\vhdl\2\2\control_memory_tb.ano";
	COMPONENT control_memory
		PORT (
			place : in  std_logic_vector (7 DOWNTO 0);
			NA : out  std_logic_vector (7 DOWNTO 0);
			MS : out  std_logic_vector (2 DOWNTO 0);
			MC : out  std_logic;
			IL : out  std_logic;
			PI : out  std_logic;
			PL : out  std_logic;
			TD : out  std_logic;
			TA : out  std_logic;
			TB : out  std_logic;
			MB : out  std_logic;
			FS : out  std_logic_vector (4 DOWNTO 0);
			MD : out  std_logic;
			RW : out  std_logic;
			MM : out  std_logic;
			MW : out  std_logic
		);
	END COMPONENT;

	SIGNAL place : std_logic_vector (7 DOWNTO 0);
	SIGNAL NA : std_logic_vector (7 DOWNTO 0);
	SIGNAL MS : std_logic_vector (2 DOWNTO 0);
	SIGNAL MC : std_logic;
	SIGNAL IL : std_logic;
	SIGNAL PI : std_logic;
	SIGNAL PL : std_logic;
	SIGNAL TD : std_logic;
	SIGNAL TA : std_logic;
	SIGNAL TB : std_logic;
	SIGNAL MB : std_logic;
	SIGNAL FS : std_logic_vector (4 DOWNTO 0);
	SIGNAL MD : std_logic;
	SIGNAL RW : std_logic;
	SIGNAL MM : std_logic;
	SIGNAL MW : std_logic;

BEGIN
	UUT : control_memory
	PORT MAP (
		place => place,
		NA => NA,
		MS => MS,
		MC => MC,
		IL => IL,
		PI => PI,
		PL => PL,
		TD => TD,
		TA => TA,
		TB => TB,
		MB => MB,
		FS => FS,
		MD => MD,
		RW => RW,
		MM => MM,
		MW => MW
	);

	PROCESS -- Annotate outputs process
		VARIABLE TX_TIME : INTEGER :=0;

		PROCEDURE ANNOTATE_NA(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",NA,"));
			write(TX_LOC, NA);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

		PROCEDURE ANNOTATE_MS(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",MS,"));
			write(TX_LOC, MS);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

		PROCEDURE ANNOTATE_MC(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",MC,"));
			write(TX_LOC, MC);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

		PROCEDURE ANNOTATE_IL(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",IL,"));
			write(TX_LOC, IL);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

		PROCEDURE ANNOTATE_PI(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",PI,"));
			write(TX_LOC, PI);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

		PROCEDURE ANNOTATE_PL(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",PL,"));
			write(TX_LOC, PL);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

		PROCEDURE ANNOTATE_TD(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",TD,"));
			write(TX_LOC, TD);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

		PROCEDURE ANNOTATE_TA(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",TA,"));
			write(TX_LOC, TA);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

		PROCEDURE ANNOTATE_TB(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",TB,"));
			write(TX_LOC, TB);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

		PROCEDURE ANNOTATE_MB(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",MB,"));
			write(TX_LOC, MB);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

		PROCEDURE ANNOTATE_FS(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",FS,"));
			write(TX_LOC, FS);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

		PROCEDURE ANNOTATE_MD(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",MD,"));
			write(TX_LOC, MD);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

		PROCEDURE ANNOTATE_RW(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",RW,"));
			write(TX_LOC, RW);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

		PROCEDURE ANNOTATE_MM(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",MM,"));
			write(TX_LOC, MM);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

		PROCEDURE ANNOTATE_MW(
			TX_TIME : INTEGER
		) IS
			VARIABLE TX_STR : String(1 to 4096);
			VARIABLE TX_LOC : LINE;
		BEGIN
			write(TX_LOC,string'("Annotate["));
			write(TX_LOC, TX_TIME);
			write(TX_LOC,string'(",MW,"));
			write(TX_LOC, MW);
			write(TX_LOC, string'("]"));
			TX_STR(TX_LOC.all'range) := TX_LOC.all;
			writeline(results, TX_LOC);
			Deallocate(TX_LOC);
		END;

	BEGIN
		CHECK_LOOP : LOOP
		WAIT FOR 50 ns;
		TX_TIME := TX_TIME + 50;
		ANNOTATE_NA(TX_TIME);
		ANNOTATE_MS(TX_TIME);
		ANNOTATE_MC(TX_TIME);
		ANNOTATE_IL(TX_TIME);
		ANNOTATE_PI(TX_TIME);
		ANNOTATE_PL(TX_TIME);
		ANNOTATE_TD(TX_TIME);
		ANNOTATE_TA(TX_TIME);
		ANNOTATE_TB(TX_TIME);
		ANNOTATE_MB(TX_TIME);
		ANNOTATE_FS(TX_TIME);
		ANNOTATE_MD(TX_TIME);
		ANNOTATE_RW(TX_TIME);
		ANNOTATE_MM(TX_TIME);
		ANNOTATE_MW(TX_TIME);
		WAIT FOR 50 ns;
		TX_TIME := TX_TIME + 50;
		END LOOP CHECK_LOOP;
	END PROCESS;

	PROCESS
		VARIABLE TX_OUT : LINE;

		BEGIN
		-- --------------------
		place <= transport std_logic_vector'("11111111"); --FF
		-- --------------------
		WAIT FOR 100 ns; -- Time=100 ns
		place <= transport std_logic_vector'("01111101"); --7D
		-- --------------------
		WAIT FOR 100 ns; -- Time=200 ns
		place <= transport std_logic_vector'("00101001"); --29
		-- --------------------
		WAIT FOR 100 ns; -- Time=300 ns
		place <= transport std_logic_vector'("01001010"); --4A
		-- --------------------
		WAIT FOR 100 ns; -- Time=400 ns
		place <= transport std_logic_vector'("00100100"); --24
		-- --------------------
		WAIT FOR 100 ns; -- Time=500 ns
		place <= transport std_logic_vector'("00001111"); --F
		-- --------------------
		WAIT FOR 100 ns; -- Time=600 ns
		place <= transport std_logic_vector'("10001110"); --8E
		-- --------------------
		WAIT FOR 100 ns; -- Time=700 ns
		place <= transport std_logic_vector'("00100011"); --23
		-- --------------------
		WAIT FOR 1000 ns; -- Time=1700 ns
		-- --------------------

		write(TX_OUT, string'("Total[]"));
		writeline(results, TX_OUT);
		ASSERT (FALSE) REPORT
			"Success! Simulation for annotation completed"
			SEVERITY FAILURE;
	END PROCESS;
END testbench_arch;

CONFIGURATION control_memory_cfg OF testbench IS
	FOR testbench_arch
	END FOR;
END control_memory_cfg;
