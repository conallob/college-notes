Please note that there was a mistake in the copy of the assignment 
which was distributed. The resources released by Thread 3 were 
incorrect. See below (in  red) for the correct resource release for 
Thread 3. 

There was also a minor mistake in Message.C where "if (errno = EINTR)"
should have been "if (errno == EINTR)".

This has been corrected in the online version.
This assignment must be implemented under UNIX on the College computers (If
you do it at home make sure that it works on the machines in College before
submitting it).

You are asked to build a simulator of the Banker's Algorithm as follows:
    
 	* Create a thread to simulate each
      of the resource requesters in the
      system. Request resources by
      sending messages for the attention
      of the "controlling" thread.
      Release resources in a similar
      fashion. Resource request and
      releases should be indicated on
      screen. The resources requests/
      releases should be as follows:
    
 	o Thread 1: (MAX 2A, 3B, 1C)
            +AB 3 +CAB 3 +B 9 -AABBBC 5
    
 	o Thread 2: (MAX 1A, 2B, 3C)
            +CCC 5 +AB 6 +B 8 -ABBCCC 1
    
 	o Thread 3: (MAX 3A, 3B, 0C)
            +AAA 7 +BBB 5 -ABBCCC 8
    
 	Note these lists indicate the max
      resources for each process, and
      the order of the requests/
      releases. "+AB" means that one A
      resource and one B resource are
      requested. "-AAC" indicates that
      two A resources and one B resource
      are to be released. A number
      indicates a number of seconds to
      wait for (pretending to be doing
      some processing). Note that each
      thread should terminate once it
      has finished its sequence of
      requests, releases and waits.
    
 	* The main thread (i.e. the initial
      thread) should simulate the the
      central controller which allocates
      resources as they are/become
      available. It should access
      requests and releases from the
      other threads and in the case of
      requests it should reply with a
      message to the requesting thread
      when the resource is available. No
      response is required for a
      release. Resource allocation
      should be shown on screen
      (including a list of remaining
      available resources). Note that
      total available resources are 3*A,
      3*B, and 3*C.
    
 	* Sample output from the program
      MUST be provided, as some of the
      evaluation will be based on the
      output. This output must come from
      the version of the code you
      submit.
    *  This utility (which can
      be invoked by typing "./memwipe")
      removes all IPC mechanisms
      currently allocated to you. You'll
      need this if your program doesn't
      remove the message queue at the
      end of a run (e.g. if the program
                crashes). Note that you can see
                what IPC mechanisms are currently
                allocated to you by invoked the
                ipcs command.
              * BankersMain.C
              * BankersController.C and the rest
                of BankersController.h Note that
                you can alter the parameters of
                the methods defined in
                BankersController.h if you need/
                want to. You can also add any
                other methods and/or data that you
                want.
              * Any other classes you feel you
                need.
