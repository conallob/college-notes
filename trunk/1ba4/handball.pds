;PALASM Design Description

;---------------------------------- Declaration Segment ------------
TITLE	 HANDBALL
PATTERN
REVISION v1.0
AUTHOR	 B.A.Coghlan
COMPANY	 Trinity College Dublin
DATE	 15/04/03

CHIP  _machr1  MACH445

;---------------------------------- PIN Declarations ---------------
;
;     Input & Output pins
;
Pin    ?		/RESET	; In
Pin    ?		/START	; In
Pin    ?		CP		; Clk
Pin    ?		PULSER  ; Clk
Pin    ?		QA0		Reg
Pin    ?		QB0		Reg
Pin    ?		QC0		Reg
Pin    ?		QD0		Reg
Pin    ?		QA1		Reg
Pin    ?		QB1		Reg
Pin    ?		QC1		Reg
Pin    ?		QD1		Reg
;
;     Pre-allocate pins that cannot be used. This makes the
;     software think they are already used and so it avoids
;     using them for anything else.
;
Pin   69		IO48	Comb
Pin   70		IO49	Comb
Pin   71		IO50	Comb
Pin   72		IO51	Comb
Pin   73		IO52	Comb
Pin   74		IO53	Comb
Pin   75		IO54	Comb
Pin   76		IO55	Comb
Pin   81		IO56	Comb
Pin   82		IO57	Comb
Pin   83		IO58	Comb
Pin   84		IO59	Comb
Pin   85		IO60	Comb
Pin   86		IO61	Comb
Pin   87		IO62	Comb
Pin   88		IO63	Comb
;
;     Internal singnals
;
Node   ?		S0		Comb
Node   ?		S1		Comb
Node   ?		A0		Comb
Node   ?		B0		Comb
Node   ?		C0		Comb
Node   ?		D0		Comb
Node   ?		SR0		Comb
Node   ?		SL0		Comb
Node   ?		SR1		Comb
Node   ?		SL1		Comb
Node   ?		A1		Comb
Node   ?		B1		Comb
Node   ?		C1		Comb
Node   ?		D1		Comb
Node   ?		FF0RST	Comb
Node   ?		FF1RST	Comb
Node   ?		FF0		Reg
Node   ?		FF1		Reg
Node   ?		ll		Comb
Node   ?		rl		Comb


;Node   ?		/LRESET
;Node   ?		/LSTART









;---------------------------------- Boolean Equation Segment -------
EQUATIONS

;
;       Shift register 0
;
QA0 := ((/s1 * /s0) * QA0) + ((/s1 * s0) * SR0) + ((s1 * /s0) * QB0) + ((s1 * s0) * A0) 
QA0.rstf = /reset 
QA0.setf = 0 
QA0.clkf = cp

QB0 := ((/s1 * /s0) * QB0) + ((/s1 * s0) * QA0) + ((s1 * /s0) * QC0) + ((s1 * s0) * B0)
QB0.rstf = /reset 
QB0.setf = 0
QB0.clkf = cp

QC0 := ((/s1 * /s0) * QC0) + ((/s1 * s0) * QB0) + ((s1 * /s0) * QD0) + ((s1 * s0) * C0)
QC0.rstf = /reset 
QC0.setf = 0
QC0.clkf = cp

QD0 := ((/s1 * /s0) * QD0) + ((/s1 * s0) * QC0) + ((s1 * /s0) * SL0) + ((s1 * s0) * D0)
QD0.rstf = /reset 
QD0.setf = 0
QD0.clkf = cp



;
;       Shift register 1
;

QA1 := ((/s1 * /s0) * QA1) + ((/s1 * s0) * SR1) + ((s1 * /s0) * QB1) + ((s1 * s0) * A1) 
QA1.rstf = /reset 
QA1.setf = 0 
QA1.clkf = cp


QB1 := ((/s1 * /s0) * QB1) + ((/s1 * s0) * QA1) + ((s1 * /s0) * QC1) + ((s1 * s0) * B1)
QB1.rstf = /reset 
QB1.setf = 0 
QB1.clkf = cp

QC1 := ((/s1 * /s0) * QC1) + ((/s1 * s0) * QB1) + ((s1 * /s0) * QD1) + ((s1 * s0) * C1)
QC1.rstf = /reset 
QC1.setf = 0
QC1.clkf = cp

QD1 := ((/s1 * /s0) * QD1) + ((/s1 * s0) * QC1) + ((s1 * /s0) * SL1) + ((s1 * s0) * D1)
QD1.rstf = /reset 
QD1.setf = 0 
QD1.clkf = cp


;
;       Start circuit
;
ll = /(rl * (/reset * /QC1))
rl = /(ll * /start)
 

;
;       FF0
;
ff0rst = /reset * /QD1

ff0.setf = QA0
ff0.rstf = /ff0rst
ff0.clkf = pulser
ff0 := 0


;
;       FF1
;

ff1rst = /reset * /QA0

ff1.setf = 0
ff1.rstf = /ff1rst
ff1.clkf = pulser
ff1 := QD1



;
;		Shift register inputs
;
S0 = /ff1
S1 = /ff0

SR0 = 0
SL0 = QA1
A0 = 0
B0 = 0
C0 = 0
D0 = 0

SR1 = QD0
SL1 = 0
A0 = 0
B1 = 0
C1 = 0
D1 = rl





;---------------------------------- Simulation Segment -------------
SIMULATION
;
; specify signals to be traced
;
Trace_on cp /reset /start pulser qa0 qb0 qc0 qd0 qa1 qb1 qc1 qd1
         /lreset /lstart ff0rst ff1rst ff0 ff1 s0 s1
;
; initialise all signals to idle state
;

setf /cp /reset /start /pulser  ; cp <- 0
                                ; /reset <- 1
								; /start <- 1
								; pulser <- 0
;
; reset the game
;
setf reset						; /reset <- 0
clockf cp						; pulse cp once
setf /reset						; /reset <- 1
;
; start the game
;
setf start						; /start <- 0
setf /start						; /start <- 1
;
; just idle along until ball is hit
;
for i := 1 to 4 do
  begin 
    clockf cp					; pulse cp 4 times 
  end
;
; hit the ball
;
setf pulser						; pulser <- 1
setf /pulser					; pulser <- 0
;
; watch it fly to wall and bounce back
;
for i := 1 to 14 do
  begin 
    clockf cp					; pulse cp 14 times
  end
;
; hit it back just at the right time
;
setf pulser						; pulser <- 1
setf /pulser					; pulser <- 0
;
; watch it fly to wall and bounce back
;
for i := 1 to 15 do
  begin
    clockf cp					; pulse cp 15 times
  end
;
; hit it back
;
setf pulser						; pulser <- 1
setf /pulser					; pulser <- 0
;
; shucks, look at this, just hit it a bit late
;
for i := 1 to 4 do
  begin
    clockf cp					; pulse cp 4 times
  end
;
; Ok start it again
;
setf start						; /start <- 0
setf /start						; /start <- 1
;
; just idle along until ball is hit
;
for i := 1 to 4 do
  begin
    clockf cp					; pulse cp 4 times
  end
;
; hit the ball
;
setf pulser						; pulser <- 1
setf /pulser					; pulser <- 0
;
; watch it fly to wall and bounce back
;
for i:= 1 to 12 do
  begin
    clockf cp					; pulse cp 12 times
  end
;
; hit it back
;
setf pulser						; pulser <- 1
setf /pulser					; pulser <- 0
;
; just my luck, hit it a bit early this time
;
for i := 1 to 4 do
  begin
    clockf cp					; pulse cp 4 times
  end
;
; end tracing
;
trace_off

;-------------------------------------------------------------------
