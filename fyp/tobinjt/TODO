  configure-ise.

  write test code.

  parser needs to ensure that no recipient struct ever has an uninitialised
  field, because format_message () et al depend on it.  This may be troublesome,
  and have implications for the flexibility of the file format.  The username
  field must be filled in with something, even if it's only "parser temp" or
  something; free_recipient depends on it.  Likewise the parser is going to have
  to be very careful with those ref-counted pref structs, to make sure it
  doesn't clobber stuff.  Maybe ref-counting is a bad idea?  I'll need to do
  something like: foreach named recipient, if there isn't a recipient struct
  yet, copy and ref-count++ the global one, else decrement the ref-count and
  make a copy of the struct pref in question.  This is going to complicate the
  code, but will save memory.  I wonder is it worthwhile?

  Add a hey-compatibility switch, begging the question: how do I handle it?
  Global boolean?  Per-recipient?  I think per recipient might be taking it a
  little too far . . .  Maybe just the presence of a .oirc disables it, except
  for signature files.

  Convert the debugging stuff into a bitmask, rather than an integer.

  Should I allow reading output from pipes?  Probably, I guess.  Possibly allow
  printf-style escape sequences too, e.g. %u for username, %a for alias.

  Write a standard header and footer for test programs; put a call to
  g_blow_chunks () into the footer to reduce valgrind output.  This will have to
  be done cleverly, so that I don't mask problems.  Possibly a second test run
  with this enabled?  Enable it by default, and have a seperate make target to
  run with it disabled.

  Make .../test-lib and move stuff that's only for testing, but doesn't produce
  and executable, into it.

  Write another standard header which calls glib_check_version ().  Incorporate
  it into the standard header above.

  Consider adding escape sequeces to read_message () so that the user can invoke
  an editor.  Waayyyy in the future.

  Write read_message.c:redisplay_message ().  Extent the test program to call
  redisplay_message () from outside read_message (); how can I test it failing,
  without make throwing a wobbly?
